plugins {
    id 'jacoco'
    id 'java-library'
    id 'maven-publish'

    id 'org.sonarqube' version '2.8'
    id 'com.diffplug.gradle.spotless' version '3.27.1'
}

group = groupId
version = artifactVersion

sourceCompatibility = 1.8
targetCompatibility = 1.8

spotless {
    java {
        encoding 'UTF-8'
        removeUnusedImports()
        eclipse().configFile "${projectDir}/config/codestyle.xml"
    }
}

configurations {
    all {
        resolutionStrategy {
            cacheChangingModulesFor(8000, 'seconds') // check for updates every build
        }
    }
    micronautBom
    compileOnly.extendsFrom(micronautBom)
    implementation.extendsFrom(micronautBom)
    annotationProcessor.extendsFrom(micronautBom)
    testAnnotationProcessor.extendsFrom(micronautBom)
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    micronautBom platform('io.micronaut:micronaut-bom:1.3.0')

    compileOnly 'io.micronaut:micronaut-inject-java'

    api 'ru.yandex.clickhouse:clickhouse-jdbc:0.2.4'

    implementation 'io.micronaut:micronaut-runtime'
    implementation 'io.micronaut:micronaut-management'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'io.micronaut.test:micronaut-test-junit5'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }

    environment([
            "USE_INTEGRATION_TESTS"   : "$useIntegrationTests",
    ])
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username System.getenv("OSS_USER")
                password System.getenv("OSS_PASS")
            }
        }
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

check.dependsOn jacocoTestReport
jacocoTestReport {
    reports {
        xml.enabled true
        html.destination file("${buildDir}/jacocoHtml")
    }
}

if (project.hasProperty("signing.keyId")) {
    apply plugin: 'signing'
    signing {
        sign publishing.publications.mavenJava
    }
}